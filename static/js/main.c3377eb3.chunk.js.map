{"version":3,"sources":["assets/img/man-on-table.svg","assets/img/developer-activity.svg","containers/greeting/Greeting.tsx","data/language-skills.tsx","data/software-skills.ts","components/software-skills/SoftwareSkills.tsx","containers/skills/Skills.tsx","containers/main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledButton","withStyles","root","margin","textTransform","Button","Greeting","className","id","role","aria-label","variant","color","href","alt","src","require","languageSkills","name","icon","faHtml5","faCss3Alt","faJava","faAndroid","faJs","faReact","faNode","faAngular","faPython","faDocker","SoftwareSkills","map","skill","key","softwareSkills","index","Skills","Main","Component","theme","createMuiTheme","palette","primary","main","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAAAA,EAAOC,QAAU,IAA0B,0C,6DCA3CD,EAAOC,QAAU,IAA0B,gD,gKCMrCC,G,MAAeC,YAAW,CAC9BC,KAAM,CACJC,OAAQ,OACRC,cAAe,cAHEH,CAKlBI,MAEY,SAASC,IACtB,OACE,yBAAKC,UAAU,gBAAgBC,GAAG,YAChC,yBAAKD,UAAU,qBACb,wBAAIA,UAAU,iBAAd,SACQ,0BAAME,KAAK,MAAMC,aAAW,SAA5B,gBADR,4BAIA,uBAAGH,UAAU,mCAAb,8CAC6C,0BAAME,KAAK,MAAMC,aAAW,SAA5B,gBAD7C,mQAQA,yBAAKH,UAAU,uBACb,kBAACP,EAAD,CAAcW,QAAQ,YAAYC,MAAM,UAAUC,KAAK,YAAvD,cAGA,kBAACb,EAAD,CAAcW,QAAQ,YAAYC,MAAM,UACtCC,KAAK,sEADP,mBAOJ,yBAAKN,UAAU,sBACb,yBAAKO,IAAI,WAAWC,IAAKC,EAAQ,Q,8BCY1BC,EA3CiB,CAC9B,CACEC,KAAM,QACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMC,OAE/B,CACEF,KAAM,OACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAME,OAE/B,CACEH,KAAM,OACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMG,OAE/B,CACEJ,KAAM,UACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMI,OAE/B,CACEL,KAAM,aACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMK,OAE/B,CACEN,KAAM,QACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMM,OAE/B,CACEP,KAAM,UACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMO,OAE/B,CACER,KAAM,UACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMQ,OAE/B,CACET,KAAM,SACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMS,OAE/B,CACEV,KAAM,SACNC,KAAM,kBAAC,IAAD,CAAiBA,KAAMU,QC7ClB,GACb,mEACA,0BACA,oDACA,8CACA,yDCFa,SAASC,IACtB,OACE,6BACE,yBAAKvB,UAAU,4BACb,wBAAIA,UAAU,aAEVU,EAAec,KAAI,SAAAC,GAAK,OACtB,wBAAIzB,UAAU,wBAAwB0B,IAAKD,EAAMd,MAC9Cc,EAAMb,WAOjB,6BAEIe,EAAeH,KAAI,SAACC,EAAOG,GAAR,OACjB,uBAAG5B,UAAU,uBAAuB0B,IAAKE,GAAQH,QCnB9C,SAASI,IACtB,OACE,yBAAK7B,UAAU,cAAcC,GAAG,UAC9B,yBAAKD,UAAU,mBACb,yBAAKA,UAAU,oBACb,yBACEO,IAAI,qBACJC,IAAKC,EAAQ,OAGjB,yBAAKT,UAAU,mBACb,wBAAIA,UAAU,kBAAd,aAIA,uBAAGA,UAAU,iCAAb,+DAIA,kBAAC,EAAD,S,ICjBW8B,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL0BC,a,wBCG5BC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAEPC,KAAM,cAQSC,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CAAeN,MAAOA,GACpB,kBAAC,EAAD,W,GAJyBD,aCXbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c3377eb3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man-on-table.da307e6a.svg\";","module.exports = __webpack_public_path__ + \"static/media/developer-activity.7d7afcd6.svg\";","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport './Greeting.css';\n\nconst StyledButton = withStyles({\n  root: {\n    margin: '16px',\n    textTransform: 'uppercase',\n  },\n})(Button);\n\nexport default function Greeting() {\n  return (\n    <div className='greeting-main' id='greeting'>\n      <div className='greeting-text-div'>\n        <h1 className='greeting-text'>\n          Hello <span role='img' aria-label='hello'>ðŸ‘‹</span> I'm Chornonoh Volodymyr\n        </h1>\n\n        <p className='greeting-text-subtitle subtitle'>\n          A passionate Full Stack Software Developer <span role='img' aria-label='space'>ðŸš€</span>\n          having an experience of building\n          Web and Mobile applications with JavaScript / Angular / React / Nodejs / Java / Kotlin.\n          Have an experience of building backend for Web and mobile applications,\n          often for integration them with third-party services and APIs.\n        </p>\n\n        <div className='button-greeting-div'>\n          <StyledButton variant='contained' color='primary' href='#contact'>\n            Contact me\n          </StyledButton>\n          <StyledButton variant='contained' color='primary'\n            href='https://drive.google.com/open?id=1jjMo-17-tkbu-g6Q8PDw8Fu2x1UGQknx'>\n            See my resume\n          </StyledButton>\n        </div>\n      </div>\n\n      <div className='greeting-image-div'>\n        <img alt='Greeting' src={require('../../assets/img/man-on-table.svg')}></img>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { faHtml5, faCss3Alt, faJs, faReact, faNode, faPython, faDocker, faJava, faAndroid, faAngular } from '@fortawesome/free-brands-svg-icons';\n\ninterface Skill {\n  name: string;\n  icon: JSX.Element;\n}\n\nconst languageSkills: Skill[] = [\n  {\n    name: 'HTML5',\n    icon: <FontAwesomeIcon icon={faHtml5} />,\n  },\n  {\n    name: 'CSS3',\n    icon: <FontAwesomeIcon icon={faCss3Alt} />,\n  },\n  {\n    name: 'Java',\n    icon: <FontAwesomeIcon icon={faJava} />,\n  },\n  {\n    name: 'Android',\n    icon: <FontAwesomeIcon icon={faAndroid} />,\n  },\n  {\n    name: 'JavaScript',\n    icon: <FontAwesomeIcon icon={faJs} />,\n  },\n  {\n    name: 'React',\n    icon: <FontAwesomeIcon icon={faReact} />,\n  },\n  {\n    name: 'Node.js',\n    icon: <FontAwesomeIcon icon={faNode} />,\n  },\n  {\n    name: 'Angular',\n    icon: <FontAwesomeIcon icon={faAngular} />,\n  },\n  {\n    name: 'Python',\n    icon: <FontAwesomeIcon icon={faPython} />,\n  },\n  {\n    name: 'Docker',\n    icon: <FontAwesomeIcon icon={faDocker} />,\n  }\n];\n\nexport default languageSkills;\n","/**\n * @fileoverview Software skills\n */\n\nexport default [\n  'âš¡ Develop highly interactive Front end for web applications',\n  'âš¡ REST API backend',\n  'âš¡ Real-time communication web-socket backend',\n  'âš¡ Distributed container-native systems',\n  'âš¡ Integration with third party services and APIs',\n];\n","import React from 'react';\n\nimport './SoftwareSkills.css';\n\nimport languageSkills from '../../data/language-skills';\nimport softwareSkills from '../../data/software-skills';\n\nexport default function SoftwareSkills() {\n  return (\n    <div>\n      <div className='software-skills-main-div'>\n        <ul className='dev-icons'>\n          {\n            languageSkills.map(skill => (\n              <li className='software-skill-inline' key={skill.name}>\n                {skill.icon}\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n\n      <div>\n        {\n          softwareSkills.map((skill, index) => (\n            <p className='subtitle skills-text' key={index}>{skill}</p>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport './Skills.css';\n\nimport SoftwareSkills from '../../components/software-skills/SoftwareSkills';\n\nexport default function Skills() {\n  return (\n    <div className='skills-main' id='skills'>\n      <div className='skills-main-div'>\n        <div className='skills-image-div'>\n          <img\n            alt='Developer activity'\n            src={require('../../assets/img/developer-activity.svg')}>\n          </img>\n        </div>\n        <div className='skills-text-div'>\n          <h1 className='skills-heading'>\n            What i do\n          </h1>\n\n          <p className='subtitle skills-text-subtitle'>\n            Full Stack developer, who never ends learning something new\n          </p>\n\n          <SoftwareSkills />\n        </div>\n      </div>\n    </div >\n  );\n}\n","import React, { Component } from 'react';\n\nimport Greeting from '../greeting/Greeting';\nimport Skills from '../skills/Skills';\n\n/**\n * Main container class\n */\nexport default class Main extends Component {\n  render() {\n    return (\n      <div>\n        <Greeting />\n        <Skills />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport Main from './containers/main/Main';\n\nimport './App.css';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n/**\n * Global application theme.\n */\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // defines exact color for primary color\n      main: '#645beb',\n    },\n  },\n});\n\n/**\n * Entry point for application.\n */\nexport default class App extends Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <Main />\n      </ThemeProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}